@use "sass:map";
@import "~perfect-scrollbar";

.ps__rail-x {
  bottom: 0;
  top: auto !important;
}

.flash-messages-container {
  top: 0;
  z-index: 9999;
  // for seeing notifications after moderate panel has open
  position: fixed;
}

.ext {
  &-rc-options {
    position: absolute;

    > .options-container {
      z-index: 1;
      margin: 46px -56px 0 0;
    }

    &:not(:active):not(:focus):not(:focus-within) > .options-container {
      &:not(:hover) {
        display: none;
      }
    }
  }

  &-page-number {
    margin: 8px 4px 16px;
  }

  &-corner-button-container {
    position: absolute;
    bottom: -5px;
    left: 0;
    z-index: 1;
  }
}

@media (max-width: 767px) {
  .ext-density-container {
    display: none;
  }
}

.report-item-wrapper {
  border-bottom: 2px solid #ebf2f7;
  padding: 5px 1px;
  position: relative;
}

html:not(.mobile) .queue:not(.buttons-visibility-always),
html.mobile .queue.buttons-visibility-on-hover {
  .ext-quick-action-buttons {
    position: absolute;
    right: 0;
  }
}

$densities: (
    size: 1,
    maxwidth: 767px,
  ),
  (
    size: 2,
    minwidth: 768px,
    maxwidth: 1365px,
  ),
  (
    size: 3,
    minwidth: 1366px,
    maxwidth: 1919px,
  ),
  (
    size: 4,
    minwidth: 1920px,
  ),
  (
    size: 5,
  ),
  (
    size: 6,
  ),
  (
    size: 7,
  ),
  (
    size: 8,
  );

@mixin generateMediaQuery($minWidth, $maxWidth) {
  @if $minWidth and $maxWidth {
    @media (min-width: $minWidth) and (max-width: $maxWidth) {
      @content;
    }
  } @else if $minWidth {
    @media (min-width: $minWidth) {
      @content;
    }
  } @else if $maxWidth {
    @media (max-width: $maxWidth) {
      @content;
    }
  }
}

@function createNumberedSelectorText($className, $N1, $N2) {
  $foo: $className + ":nth-child(" + $N1 + "):nth-last-child(" + $N2 + "),";

  @return $foo;
}

@function create-text-selector($num, $className) {
  $foo: "";
  $threshold: $num + 1;

  @for $N1 from 1 through $num {
    @for $N2 from 1 through $num {
      @if $N2 < $threshold {
        $foo: $foo +
          $className +
          ":nth-child(" +
          $N1 +
          "):nth-last-child(" +
          $N2 +
          "),";
      }
    }

    $threshold: $threshold - 1;
  }

  @return $foo;
}

@mixin createNumbered($num, $classNames) {
  $foo: "";

  @each $className in $classNames {
    $foo: $foo + create-text-selector($num, $className);
  }

  @if $foo != "" {
    #{$foo} {
      @content;
    }
  }
}

@mixin reportItemDensity($size, $isMedia: false) {
  .report-item-wrapper {
    width: if($size == 1, 100%, calc(100% / #{$size}));

    @if $size != 1 {
      &:not(:nth-child(#{$size}n)) {
        box-shadow: 1px 0 0 0 #ebf2f7;
      }
    }

    $className: &;

    @if $isMedia == false and $size > 1 {
      @at-root {
        @include createNumbered(
          $size - 1,
          (".queue:not([data-density]) .report-item-wrapper", $className)
        ) {
          height: fit-content;
        }
      }
    }
  }
}

@each $density in $densities {
  $size: map-get($density, size);
  $minWidth: map-get($density, minwidth);
  $maxWidth: map-get($density, maxwidth);

  .queue[data-density="#{$size}"] {
    @include reportItemDensity($size);
  }

  @include generateMediaQuery($minWidth, $maxWidth) {
    .queue {
      &:not([data-density]),
      &[data-density=""],
      &[data-density="0"] {
        @include reportItemDensity($size, true);
      }
    }
  }
}
